"use strict";
var rxjs_1 = require("rxjs");
var jsondiffpatch = require("jsondiffpatch");
var rxjs_adapter_1 = require("@cycle/rxjs-adapter");
var g_unanchoredLedger = {};
function fromEvent(diffMap, eventName) {
    return rxjs_1.Observable.create(function (observer) {
        var handler = function (e) { return observer.next(e); };
        diffMap.on(eventName, handler);
        return function () { return diffMap.off(eventName, handler); };
    });
}
function diff(previous, current) {
    return jsondiffpatch.diff(previous, current);
}
function patch(diffMap, previousDescriptor, descriptor) {
    var delta = diff(previousDescriptor, descriptor);
    // console.log(`previous`, previousDescriptor)
    // console.log(`current`, descriptor)
    // console.log(`delta`, delta)
    if (delta) {
        var controls = delta.controls, map = delta.map, sources = delta.sources, layers = delta.layers, canvas = delta.canvas, options = delta.options;
        if (controls) {
            patchControls(diffMap, controls, descriptor.controls);
        }
        if (map) {
            patchMap(diffMap, map, descriptor.map, options);
        }
        if (sources) {
            patchSources(diffMap, sources, descriptor.sources);
        }
        if (layers) {
            patchLayers(diffMap, layers, descriptor.layers);
        }
        if (canvas) {
            patchCanvas(diffMap, canvas, descriptor.canvas);
        }
    }
    return descriptor;
}
function patchMap(diffMap, mapDelta, mapDescriptor, options) {
    if (mapDelta.zoom) {
        diffMap.easeTo({
            center: diffMap.getCenter(),
            zoom: mapDescriptor.zoom
        });
    }
    if (mapDelta.center) {
        var newCenter = mapDescriptor.center;
        if (options && options.offset) {
            var _a = options.offset, x = _a[0], y = _a[1];
            var coordinates = diffMap.project(mapDescriptor.center);
            var shiftedCenter = coordinates.sub({ x: x, y: y });
            newCenter = diffMap.unproject(shiftedCenter);
        }
        diffMap.easeTo({
            center: newCenter,
            zoom: diffMap.getZoom()
        });
    }
    if (mapDelta.dragPan) {
        //console.log(`dragPan`, mapDescriptor.dragPan)
        if (mapDescriptor.dragPan) {
            //console.log(`enabling drag`)
            diffMap.dragPan.enable();
        }
        else {
            //console.log(`disabling drag`)
            diffMap.dragPan.disable();
        }
    }
}
function patchSources(diffMap, delta, descriptor) {
    if (delta) {
        if (Array.isArray(delta)) {
            var len = delta.length;
            var vals = void 0;
            switch (len) {
                case 1:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            var data = vals[key];
                            diffMap.addSource(key, data);
                        }
                    }
                    break;
                case 2:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            diffMap.removeSource(key);
                            diffMap.addSource(key, descriptor[key]);
                        }
                    }
                    break;
                case 3:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            diffMap.removeSource(key);
                        }
                    }
                    break;
                default:
                    throw new Error("Invalid delta length");
            }
        }
        else {
            for (var key in delta) {
                var newData = descriptor[key].data;
                diffMap.getSource(key).setData(newData);
            }
        }
    }
}
function patchLayers(diffMap, delta, descriptor) {
    if (delta) {
        if (Array.isArray(delta)) {
            var len = delta.length;
            var vals = void 0;
            switch (len) {
                case 1:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            var data = vals[key];
                            diffMap.addLayer(data);
                        }
                    }
                    break;
                case 2:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            diffMap.removeLayer(key);
                            diffMap.addLayer(descriptor[key]);
                        }
                    }
                    break;
                case 3:
                    vals = delta[0];
                    for (var key in vals) {
                        if (vals.hasOwnProperty(key)) {
                            diffMap.removeLayer(key);
                        }
                    }
                    break;
                default:
                    throw new Error("Invalid delta length");
            }
        }
    }
}
function patchControls(diffMap, delta, descriptor) {
}
function patchCanvas(diffMap, delta, descriptor) {
    if (delta) {
        if (descriptor.style && descriptor.style.cursor) {
            diffMap.getCanvas().style.cursor = descriptor.style.cursor;
        }
    }
}
function diffAndPatch(descriptor) {
    if (typeof descriptor === "undefined" || !descriptor) {
        return undefined;
    }
    var anchorId = descriptor.map.container;
    var anchor = document.getElementById(anchorId);
    if (!anchor) {
        g_unanchoredLedger[anchorId] = descriptor;
        return rxjs_1.Observable.never();
    }
    else {
        var diffMap_1 = anchor.diffMap;
        if (!diffMap_1) {
            var controls_1 = descriptor.controls, map = descriptor.map, sources_1 = descriptor.sources, layers_1 = descriptor.layers, canvas_1 = descriptor.canvas, options_1 = descriptor.options;
            diffMap_1 = new mapboxgl.Map(descriptor.map);
            return rxjs_1.Observable.create(function (observer) {
                diffMap_1.on('load', function () {
                    /*** HACK to allow for enable/disable from outset */
                    diffMap_1.dragPan.disable();
                    diffMap_1.dragPan.enable();
                    /*** End HACK */
                    if (controls_1) {
                    }
                    if (sources_1) {
                        for (var key in sources_1) {
                            if (sources_1.hasOwnProperty(key)) {
                                diffMap_1.addSource(key, sources_1[key]);
                            }
                        }
                    }
                    if (layers_1) {
                        for (var key in layers_1) {
                            if (layers_1.hasOwnProperty(key)) {
                                diffMap_1.addLayer(layers_1[key]);
                            }
                        }
                    }
                    if (canvas_1) {
                        if (canvas_1.style && canvas_1.style.cursor) {
                            diffMap_1.getCanvas().style.cursor = canvas_1.style.cursor;
                        }
                    }
                    if (options_1 && options_1.offset) {
                        var _a = options_1.offset, x = _a[0], y = _a[1];
                        var coordinates = diffMap_1.project(diffMap_1.getCenter());
                        var shiftedCenter = coordinates.sub({ x: x, y: y });
                        var newCenter = diffMap_1.unproject(shiftedCenter);
                        diffMap_1.setCenter(newCenter);
                    }
                    ;
                    anchor.diffMap = diffMap_1;
                    anchor.previousDescriptor = descriptor;
                    observer.next(descriptor);
                    observer.complete();
                });
            });
        }
        else {
            var processing = anchor.diffMapProcessing;
            if (!processing) {
                ;
                anchor.diffMapProcessing = true;
                var previousDescriptor = anchor.previousDescriptor;
                var out = rxjs_1.Observable.of(patch(diffMap_1, previousDescriptor, descriptor));
                anchor.previousDescriptor = descriptor;
                anchor.diffMapProcessing = false;
                var queued = anchor.descriptorQueue;
                if (queued && Array.isArray(queued) && queued.length) {
                    var d = queued.shift();
                    return diffAndPatch(d);
                }
                return out;
            }
            else {
                var queued = anchor.descriptorQueue;
                if (queued && Array.isArray(queued)) {
                    queued.push(descriptor);
                }
                else {
                    ;
                    anchor.descriptorQueue = [descriptor];
                }
                return rxjs_1.Observable.never();
            }
        }
    }
}
function renderRawRootElem$(descriptor$, accessToken) {
    var mutation$ = rxjs_1.Observable.create(function (observer) {
        var mObserver = new MutationObserver(function (m) { return observer.next(m); });
        var config = { childList: true, subtree: true };
        mObserver.observe(document, config);
        return function () { mObserver.disconnect(); };
    });
    var fromMutation$ = mutation$
        .switchMap(function () {
        var anchorId;
        var buffer = [];
        for (anchorId in g_unanchoredLedger) {
            var anchor = document.getElementById(anchorId);
            if (anchor) {
                var cachedDescriptor = g_unanchoredLedger[anchorId];
                delete g_unanchoredLedger[anchorId];
                buffer.push(cachedDescriptor);
            }
        }
        if (buffer.length) {
            return rxjs_1.Observable.from(buffer);
        }
        else {
            return rxjs_1.Observable.never();
        }
    });
    var patch$ = rxjs_1.Observable.merge(descriptor$, fromMutation$)
        .mergeMap(function (descriptor) {
        return diffAndPatch(descriptor);
    })
        .publish().refCount();
    return patch$;
}
function makeQueryRenderedFilter(diffMap$, event$, runSA) {
    return function queryRenderedFilter(info) {
        var out$ = diffMap$.switchMap(function (diffMap) {
            return event$.map(function (e) {
                var layers = info && info.layers && info.layers.filter(function (x) { return diffMap.getLayer(x); });
                if (layers) {
                    var features = diffMap.queryRenderedFeatures(e.point, { layers: layers });
                    return features;
                }
                return undefined;
            })
                .publish().refCount();
        });
        var observable = runSA ? runSA.adapt(out$, rxjs_adapter_1.default.streamSubscribe) : out$;
        return observable;
    };
}
function makeEventsSelector(diffMap$, runSA) {
    return function events(eventName) {
        if (typeof eventName !== "string") {
            throw new Error("MapboxGL driver's events() expects argument to be a " +
                "string representing the event type to listen for.");
        }
        var out$ = diffMap$.switchMap(function (diffMap) {
            return fromEvent(diffMap, eventName);
        })
            .publish().refCount();
        var observable = runSA ? runSA.adapt(out$, rxjs_adapter_1.default.streamSubscribe) : out$;
        return {
            observable: observable,
            queryRenderedFilter: makeQueryRenderedFilter(diffMap$, out$, runSA)
        };
    };
}
function makeMapSelector(applied$, runSA) {
    return function select(anchorId) {
        //console.log(`choosing map: ${anchorId}`)
        var diffMap$ = applied$
            .map(function () { return document.getElementById(anchorId); })
            .filter(function (x) { return !!x; })
            .distinctUntilChanged(function (x) { return x && x.diffMap; })
            .map(function (x) { return x.diffMap; })
            .publishReplay(1).refCount();
        return {
            observable: runSA ? runSA.adapt(diffMap$, rxjs_adapter_1.default.streamSubscribe) : diffMap$,
            events: makeEventsSelector(diffMap$, runSA)
        };
    };
}
function makeMapJSONDriver(accessToken) {
    if (!accessToken || (typeof (accessToken) !== 'string'))
        throw new Error("MapDOMDriver requires an access token.");
    if (!mapboxgl.accessToken) {
        mapboxgl.accessToken = accessToken;
    }
    function mapJSONDriver(descriptor$, runSA) {
        var adapted$;
        if (runSA) {
            adapted$ = rxjs_adapter_1.default.adapt(descriptor$, runSA.streamSubscribe)
                .publishReplay(1).refCount();
        }
        else {
            adapted$ = descriptor$
                .publishReplay(1).refCount();
        }
        var applied$ = renderRawRootElem$(adapted$, accessToken);
        applied$.subscribe();
        return {
            select: makeMapSelector(applied$, runSA)
        };
    }
    ;
    mapJSONDriver.streamAdapter = rxjs_adapter_1.default;
    return mapJSONDriver;
}
exports.makeMapJSONDriver = makeMapJSONDriver;
//# sourceMappingURL=data:application/json;base64,